--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Onboarding where

import Daml.Script
import Model.BankBIC
import Model.Balance
import DA.Set qualified as Set
import DA.Foldable (mapA_, forA_)
import DA.Optional (mapOptional, fromSomeNote, whenSome)
import qualified DA.TextMap as TextMap
import DA.TextMap (TextMap)
import DA.Action (foldlA, void)

type EntityNameBicParticipantName = (Text, Text, Text)
type EntityToBicMapping = [EntityNameBicParticipantName]
type Parties = [Party]

data PartyInfo = PartyInfo with
  id : Int
  name : Text
  bic : Text
  baseUrl : Text
  participantName : Text
  accounts : Optional [Account]
  clients : [ClientInfo]

data Account = Account with
  provider : Text
  iban : Iban
  bearerToken : Text

type Iban = Text

data ClientInfo = ClientInfo with
    clientId : Int
    name : Text
    iban : Iban
    bearerToken : Text
  deriving (Eq, Show)

data Output = Output with
    guiBackendConfig : GuiBackendConfig
    parties : [Party]
  deriving (Eq, Show)

type GuiBackendConfig = [GuiBackendConfigEntry]

data GuiBackendConfigEntry = GuiBackendConfigEntry with
    id : Int
    baseUrl : Text
    damlPartyId : Party
    name : Text
    clients : [ClientInfo]
  deriving (Eq, Show)


onboarding : [PartyInfo] -> Script Output
onboarding partyInfo = do
  scheduler <- allocatePartyOn "Scheduler" (ParticipantName "schedulerParticipant")
  assembler <- allocatePartyOn "Assembler" (ParticipantName "assemblerParticipant")
  parties <- setupParties partyInfo
  mapA_ (setupBic  scheduler assembler parties) partyInfo
  entries <- mapA (setupBalances parties) partyInfo
  pure $ createOutput entries


extractConfig : [PartyInfo] -> Script Output
extractConfig partyInfo = do
  let participantNames = fmap (\info -> ParticipantName info.participantName) partyInfo
  knownParties <- fmap (.party) <$> listKnownParties
  knownParties <- foldlA
    (\result participant -> ((++ result) . fmap (.party)) <$> listKnownPartiesOn participant)
    knownParties
    participantNames
  bics <- foldlA
    (\result party -> do
      partyBics <- fmap snd <$> queryFilter @BankBIC party (\x -> signatory x == [party])
      let partyBicMapping = TextMap.fromList $ fmap (\x -> (x.bic, party)) partyBics
      pure $ TextMap.union result partyBicMapping)
    TextMap.empty
    knownParties
  let entries = mapOptional
        (\info -> (\party ->
          GuiBackendConfigEntry
            with
              id = info.id
              baseUrl = info.baseUrl
              damlPartyId = party
              name = info.name
              clients = info.clients
          )
          <$> TextMap.lookup info.bic bics)
        partyInfo
  pure $ createOutput entries


createOutput : [GuiBackendConfigEntry] -> Output
createOutput entries = Output { guiBackendConfig = entries, parties = map damlPartyId entries }


setupParties : [PartyInfo] -> Script (TextMap Party)
setupParties partyInfo = do
  foldlA createParty TextMap.empty partyInfo
  where
    createParty parties info = do
      debug $ "Creating party: " <> info.name
      party <- allocatePartyOn info.name (ParticipantName info.participantName)
      pure $ TextMap.insert info.name party parties

setupBic : Party -> Party -> TextMap Party -> PartyInfo -> Script ()
setupBic scheduler assembler parties partyInfo = do
  let party = fromSomeNote
        ("No party found for: " <> partyInfo.name)
        (TextMap.lookup partyInfo.name parties)

  debug $ "Creating BankBic " <> partyInfo.bic <> " for " <> partyInfo.name
  void $ party `submit` createCmd BankBIC
    with
      bic = partyInfo.bic
      bankShards = Set.singleton party
      schedulerShards = Set.singleton scheduler
      assemblerShards = Set.singleton assembler
      otherBanks = Set.fromList . textMapValues $ TextMap.filter (/= party) parties

setupBalances : TextMap Party -> PartyInfo -> Script GuiBackendConfigEntry
setupBalances parties partyInfo = do
  let party = fromSomeNote
        ("No party found for: " <> partyInfo.name)
        (TextMap.lookup partyInfo.name parties)

  whenSome partyInfo.accounts \accounts -> do
    forA_ accounts \account -> do
      let provider = fromSomeNote
              ("No party found for provider: " <> account.provider)
              (TextMap.lookup account.provider parties)
      debug $
          "Creating Account with IBAN " <> account.iban
        <> " for " <> partyInfo.name
        <> " with provider " <> account.provider
      void $ provider `submit` createCmd Balance
        with
          iban = account.iban
          provider
          owner = BalanceOwner with name = partyInfo.name, party = Some party
          currency = "USD"
          amount = 0.0

  forA_ partyInfo.clients \client -> do
    debug $
         "Creating Client Account with IBAN " <> client.iban
      <> " for " <> client.name
      <> " with provider " <> partyToText party
    void $ party `submit` createCmd Balance
      with
        iban = client.iban
        provider = party
        owner = BalanceOwner with name = client.name, party = None
        currency = "USD"
        amount = 0.0

  pure GuiBackendConfigEntry
    with
      id = partyInfo.id
      baseUrl = partyInfo.baseUrl
      damlPartyId = party
      name = partyInfo.name
      clients = partyInfo.clients

-- Helper

textMapValues : TextMap a -> [a]
textMapValues m = map snd $ TextMap.toList m
