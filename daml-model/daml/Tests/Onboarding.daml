--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Tests.Onboarding where

import Daml.Script
import Model.BankBIC
import Model.Balance
import DA.Set qualified as Set
import DA.Foldable (forA_)
import DA.Optional (fromSomeNote, whenSome)
import qualified DA.TextMap as TextMap
import DA.TextMap (TextMap)
import DA.Action (foldlA, void)

type EntityNameBicParticipantName = (Text, Text, Text)
type EntityToBicMapping = [EntityNameBicParticipantName]
type Parties = [Party]

data PartyInfo = PartyInfo with
  id : Int
  name : Text
  bic : Optional Text
  baseUrl : Text
  participantName : Text
  account : Optional Account
  clients : [ClientInfo]

data Account = Account with
  provider : Text
  iban : Iban

type Iban = Text

data ClientInfo = ClientInfo with
    name : Text
    iban : Iban
  deriving (Eq, Show)

data Output = Output with
    guiBackendConfig : GuiBackendConfig
    parties : [Party]
  deriving (Eq, Show)

type GuiBackendConfig = [GuiBackendConfigEntry]

data GuiBackendConfigEntry = GuiBackendConfigEntry with
    id : Int
    baseUrl : Text
    damlPartyId : Party
    name : Text
  deriving (Eq, Show)

onboarding : [PartyInfo] -> Script Output
onboarding partyInfo = do
  scheduler <- allocatePartyOn "Scheduler" (ParticipantName "schedulerParticipant")
  assembler <- allocatePartyOn "Assembler" (ParticipantName "assemblerParticipant")
  parties <- setupParties partyInfo
  entries <- mapA (setupAccount scheduler assembler parties) partyInfo
  pure $ Output { guiBackendConfig = entries, parties = map damlPartyId entries }

setupParties : [PartyInfo] -> Script (TextMap Party)
setupParties partyInfo = do
  foldlA createParty TextMap.empty partyInfo
  where
    createParty parties info = do
      debug $ "Creating party: " <> info.name
      party <- allocatePartyOn info.name (ParticipantName info.participantName)
      pure $ TextMap.insert info.name party parties

setupAccount : Party -> Party -> TextMap Party -> PartyInfo -> Script GuiBackendConfigEntry
setupAccount scheduler assembler parties partyInfo = do
  let party = fromSomeNote
        ("No party found for: " <> partyInfo.name)
        (TextMap.lookup partyInfo.name parties)

  whenSome partyInfo.bic \bic -> do
    debug $ "Creating BankBic " <> bic <> " for " <> partyInfo.name
    void $ party `submit` createCmd BankBIC
      with
        bic = bic
        bankShards = Set.singleton party
        schedulerShards = Set.singleton scheduler
        assemblerShards = Set.singleton assembler
        otherBanks = Set.fromList . textMapValues $ TextMap.filter (/= party) parties

  whenSome partyInfo.account \account -> do
    let provider = fromSomeNote
            ("No party found for provider: " <> account.provider)
            (TextMap.lookup account.provider parties)
    debug $ "Creating Account with IBAN " <> account.iban <> " for " <> partyInfo.name <> " with provider " <> account.provider
    void $ provider `submit` createCmd Balance
      with
        iban = account.iban
        provider
        owner = BalanceOwner with name = partyInfo.name, party = Some party
        currency = "USD"
        amount = 0.0

  forA_ partyInfo.clients \client -> do
    debug $ "Creating Client Account with IBAN " <> client.iban <> " for " <> client.name <> " with provider " <> partyInfo.name
    void $ party `submit` createCmd Balance
      with
        iban = client.iban
        provider = party
        owner = BalanceOwner with name = client.name, party = Some party
        currency = "USD"
        amount = 0.0

  pure GuiBackendConfigEntry
    with
      id = partyInfo.id
      baseUrl = partyInfo.baseUrl
      damlPartyId = party
      name = partyInfo.name

-- Helper

textMapValues : TextMap a -> [a]
textMapValues m = map snd $ TextMap.toList m
