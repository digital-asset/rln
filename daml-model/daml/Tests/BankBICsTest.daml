--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Tests.BankBICsTest where

import Daml.Script

import DA.Foldable
import qualified DA.Set as S

import Tests.PartyAlloc
import Model.BankBIC

createBankBICs : [(Party, Text)] -> S.Set Party -> S.Set Party -> Script ()
createBankBICs banksWithBICs schedulerShards assemblerShards = do
    forA_ banksWithBICs (\(bank, bic) -> submit bank $ createCmd BankBIC 
      with 
          bankShards = S.singleton bank
          otherBanks = S.delete bank allBanks
          ..
      )
    pure ()
  where allBanks = S.fromList $ fst <$> banksWithBICs

populateBanks : Script ()
populateBanks = script do
  Banks{cb, bank11, bank12, bank21, bank22} <- actionPartyAllocation
  ServiceParties{scheduler, assembler} <- servicePartyAllocation

  let
    actionParties = [bank12, bank11, bank21, bank22, cb]
    assemblerShardset = S.singleton assembler
    schedulerShardset = S.singleton scheduler
    actionPartiesBICS = ["BANK12_BIC", "BANK11_BIC", "BANK21_BIC", "BANK22_BIC", "BANKCB_BIC"]
    banksWithBICs = zipWith (\bank bic -> (bank, bic)) actionParties actionPartiesBICS

  createBankBICs banksWithBICs schedulerShardset assemblerShardset
