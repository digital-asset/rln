--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Tests.TransferWorkflow where
import Daml.Script
import Model.Balance
import Tests.PartyAlloc
import Workflow.Data
import Workflow.InitiateTransfer
import Workflow.TransferProposal
import Workflow.Instruction
import Workflow.TransactionManifest
import DA.Traversable qualified as Traversable

{-
       CB
    B11  B12
  B21     B22
Alice      Bob

The flow captures when Alice wants to transfer 100 USD to Bob
-}

singleCashLegTransfer: Script ()
singleCashLegTransfer = script do
  SingleCashLegTransfer with
    banks = Banks{..}
    serviceParties = ServiceParties{assembler}
    .. <- initAndCreateProposals

  (_, Some instruction21Cid) <- approveProposalAndHandleBalances bank21 proposal21Cid True
  approveProposalAndHandleBalances bank11 proposal11Cid False
  (_, Some instructionCBCid) <- approveProposalAndHandleBalances cb proposalCBCid True
  approveProposalAndHandleBalances bank12 proposal12Cid False
  (_, Some instruction22Cid) <- approveProposalAndHandleBalances bank22 proposal22Cid True

  evidence <- assembler `submit` exerciseCmd manifestCid FinalizeSettlement with reason = None; ..

  bank21 `submit` exerciseCmd instruction21Cid Settle with evidence
  cb `submit` exerciseCmd instructionCBCid Settle with evidence
  bank22 `submit` exerciseCmd instruction22Cid Settle with evidence

  assertBalance bank21 "Alice" 900.0
  assertBalance cb "Bank11" 900.0
  assertBalance cb "Bank12" 1100.0
  assertBalance bank22 "Bob" 1100.0

rejectionAfterApproval: Script ()
rejectionAfterApproval = script do
  SingleCashLegTransfer with
    banks = Banks{..}
    serviceParties = ServiceParties{assembler}
    .. <- initAndCreateProposals

  (approved, _) <- bank21 `submit` exerciseCmd proposal21Cid ApproveProposal with reason = None; settleOnLedger = True
  _ : ContractId RejectedTransferProposal <- bank21 `submit` exerciseCmd approved RejectApprovedProposal with reason = None

  pure ()

cancelledCashLegTransfer: Script ()
cancelledCashLegTransfer = script do
  SingleCashLegTransfer with
    banks = Banks{..}
    serviceParties = ServiceParties{assembler}
    .. <- initAndCreateProposals

  approveProposalAndHandleBalances bank11 proposal11Cid False
  (_, Some instruction21Cid) <- approveProposalAndHandleBalances bank21 proposal21Cid True
  (_, Some instructionCBCid) <- approveProposalAndHandleBalances cb proposalCBCid True
  (_, Some instruction22Cid) <- approveProposalAndHandleBalances bank22 proposal22Cid True
  bank12 `submit` exerciseCmd proposal12Cid RejectProposal with reason = Some "Regulator reasons."; ..

  evidence <- assembler `submit` exerciseCmd manifestCid RejectSettlement with reason = None; ..

  bank21 `submit` exerciseCmd instruction21Cid Cancel with evidence
  cb `submit` exerciseCmd instructionCBCid Cancel with evidence
  bank22 `submit` exerciseCmd instruction22Cid Cancel with evidence

  assertBalance bank21 "Alice" 1000.0
  assertBalance cb "Bank11" 1000.0
  assertBalance cb "Bank12" 1000.0
  assertBalance bank22 "Bob" 1000.0

data SingleCashLegTransfer =
  SingleCashLegTransfer with
    manifestCid : ContractId TransactionManifest
    proposal21Cid : ContractId TransferProposal
    proposal11Cid : ContractId TransferProposal
    proposalCBCid : ContractId TransferProposal
    proposal12Cid : ContractId TransferProposal
    proposal22Cid : ContractId TransferProposal
    dummyData : DummyData
    banks : Banks
    serviceParties : ServiceParties

initAndCreateProposals : Script SingleCashLegTransfer
initAndCreateProposals = do
  let dummyData@DummyData{..} = initialDummyData

  serviceParties@ServiceParties with .. <- servicePartyAllocation
  banks@Banks with .. <- actionPartyAllocation

  createUsdBalance cb (Some bank11) "Bank11" "Bank11" 1000.0
  createUsdBalance cb (Some bank12) "Bank12" "Bank12" 1000.0
  createUsdBalance bank21 None "Alice" "Alice" 1000.0
  createUsdBalance bank22 None "Bob" "Bob" 1000.0

  initiateTransferCid <- bank21 `submit` createCmd
    InitiateTransfer with
     initiator = bank21
     ..

  (manifestCid, transferProposalCids) <-
    createProposalsAliceToBob serviceParties banks initiateTransferCid
      Instrument with amount = 100.0, label = usdCurrency

  assertMsg "Unexpected number of transfer proposal." $ 5 == length transferProposalCids
  let [proposal21Cid, proposal11Cid, proposalCBCid, proposal12Cid, proposal22Cid] = transferProposalCids

  pure SingleCashLegTransfer with ..

data DummyData =
  DummyData with
    groupId : Text
    payload : Text
    currency : Text

initialDummyData : DummyData
initialDummyData =
  DummyData with
    groupId = "G1"
    payload = "dummy payload"
    currency = usdCurrency

usdCurrency : Text
usdCurrency = "USD"

createUsdBalance : Party -> Optional Party -> Text -> Text -> Decimal -> Script (ContractId Balance)
createUsdBalance provider ownerParty ownerName iban amount = do
  provider `submit` createCmd Balance with
    currency = usdCurrency
    owner = BalanceOwner with name = ownerName, party = ownerParty
    ..

assertBalance : Party -> Text -> Decimal -> Script ()
assertBalance provider iban expectedBalance = do
  Some (_, finalBalance) <- queryContractKey @Balance provider BalanceKey with ..
  assertMsg "Balance does not match." $ finalBalance.amount == expectedBalance

createProposalsAliceToBob : ServiceParties -> Banks -> ContractId InitiateTransfer -> Instrument -> Script (ContractId TransactionManifest, [ContractId TransferProposal])
createProposalsAliceToBob ServiceParties{..} Banks{..} initiateTransferCid delivery = do
  scheduler `submit` exerciseCmd initiateTransferCid
      CreateProposals with
      messageIdToLegs = [("Leg1",
        Leg with
          approversToSettlementSteps = [
              (bank21, SettlementStep with ibans = SenderOnly "Alice", ..),
              (bank11, SettlementStep with ibans = SenderOnly "Bank21", ..),
              (cb, SettlementStep with ibans = (SenderAndReceiver with sender = "Bank11"; receiver = "Bank12"); ..),
              (bank12, SettlementStep with ibans = ReceiverOnly "Bank22", ..),
              (bank22, SettlementStep with ibans = ReceiverOnly "Bob", ..)
            ]
          ..
        )]
      ..
  where
    legPayload = "dummy leg payload"

getBalanceOwnerFromKey: BalanceKey -> Script BalanceOwner
getBalanceOwnerFromKey balanceKey = do
  Some (_, Balance{..}) <- queryContractKey @Balance balanceKey.provider balanceKey
  pure owner

{--
In actual flow, for daml participant we can use AutoApprove trigger
to listen to TransferProposal and decide whether to approve/reject and lock/createIncoming balances
--}
approveProposalAndHandleBalances: Party -> ContractId TransferProposal -> Bool -> Script (ContractId ApprovedTransferProposal, Optional (ContractId Instruction))
approveProposalAndHandleBalances provider transferProposalCid settleOnLedger = do
  (approved, maybeInstruction) <- provider `submit` exerciseCmd transferProposalCid ApproveProposal with reason = None; settleOnLedger
  instruction <- Traversable.mapA (\cid -> provider `submit` exerciseCmd cid Encumber) maybeInstruction
  pure (approved, instruction)
