module Tests.LoanManagementTest where

import Trigger.LoanManagement
import Daml.Trigger.Assert (toACS, testRule, flattenCommands, assertExerciseCmd)
import Daml.Script
import Tests.PartyAlloc
import Model.Balance
import Model.LoanConfig
import qualified DA.Map as M
import Daml.Trigger (Command)


setup = do
    proposalTime <- getTime
    banks@Banks{..} <- actionPartyAllocation
    schedulerAndAssembler@ServiceParties{..} <- servicePartyAllocation
    users@UserParties{..} <- userPartyAllocation

    let approvers = [cb, bank11, bank12, bank21, bank22]
    pure (banks, schedulerAndAssembler, users)

createLoanWithMaxLoanPerTransaction : Script ()
createLoanWithMaxLoanPerTransaction = do
    (Banks{..}, ServiceParties{..}, users@UserParties{..}) <- setup
    aliceBalanceCid <- submit bank11 do 
        createCmd Balance with 
            provider = bank11
            owner = Some users.alice
            iban = "CH123"
            currency = "USD"
            amount = 0.0

    loanConfigCid <- submit bank11 $ do createCmd
        LoanConfig with
            provider = bank11
            accountHolder = users.alice
            account = "CH123"
            activeLoan = 0.0
            balanceLoanThreshold = 1000.0
            maxLoanThreshold = 10000.0
            balancePaybackThreshold = 20000.0

    commands <- getTriggerResults bank11 loanConfigCid aliceBalanceCid

    verifyCommandsCount commands 1
    verifyLoanAmount loanConfigCid commands None


-- Helper functions

getTriggerResults: Party -> ContractId LoanConfig -> ContractId Balance -> Script [Command]
getTriggerResults triggerParty loanConfigCid balanceCid = do
  let marker = optional mempty toACS $ Some loanConfigCid
      acs = marker <> toACS balanceCid
  (flattenCommands . snd) <$> testRule loanManagementTrigger triggerParty [] acs M.empty ()

verifyLoanAmount: ContractId LoanConfig -> [Command] -> Optional Decimal -> Script ()
verifyLoanAmount loanConfigCid commands amount = do
  assertExerciseCmd commands $ \(cid, exercisedChoice) -> do
    assertMsg "ContractId used in exercise is incorrect" $ cid == loanConfigCid
    case exercisedChoice of
      CreateLoan a | a == amount -> Right ()
      CreateLoan a | a /= amount -> Left $ "Wrong loan amount provided. Expected: " <> show amount <> " but granted " <> show a
      _ -> Left $ "Did not settle on ledger"

verifyCommandsCount: [Command] -> Int -> Script ()
verifyCommandsCount commands expected = do
    assertMsg ("Expected " <> show expected <> " but got " <> show len) $ len == expected 
    where len = length commands
    