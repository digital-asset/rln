--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Trigger.LoanManagement where

import DA.Action (void)
import DA.Foldable (forA_)
import DA.Map qualified as Map
import Daml.Trigger
import Model.Balance
import Model.LoanConfig


loanManagementTrigger : Trigger ()
loanManagementTrigger = Trigger
    { initialize = pure ()
    , updateState = \_ -> pure ()
    , rule = createLoanWhenBelowThreshold
    , registeredTemplates = RegisteredTemplates [
        registeredTemplate @Balance,
        registeredTemplate @LoanConfig
        ]
    , heartbeat = None
    }

createLoanWhenBelowThreshold : Party -> TriggerA () ()
createLoanWhenBelowThreshold sender = do
    loanConfigs <- query @LoanConfig
    balances <- query @Balance
    let balanceMap = Map.fromList $ map ((\x -> ((x.provider, x.iban), x)) . snd) balances
    forA_ loanConfigs \(loanCid, loanConfig) -> do
        let maybeBalance = Map.lookup (loanConfig.provider, loanConfig.account) balanceMap
        case maybeBalance of
            Some balance | loanConfig.activeLoan < loanConfig.maxLoanThreshold -> do
                createLoan balance.provider balance.iban None loanCid
            Some balance | loanConfig.activeLoan >= loanConfig.maxLoanThreshold -> do
                traceA $ "Maximum loan reached for " <> loanConfig.account
            _ -> traceA $ "No balance found for " <> loanConfig.account -- TODO: retire LC?
    traceA "Loan creation completed."

createLoan : Party -> Text -> Optional Decimal -> ContractId LoanConfig -> TriggerA () ()
createLoan provider account loanAmount loanConfigCid = do
    let cmd = exerciseCmd loanConfigCid (CreateLoan with loanAmount = loanAmount)
    void $ emitCommands [cmd] []

traceA : (Applicative f, Show b) => b -> f ()
traceA msg = pure $ trace msg ()
