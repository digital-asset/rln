--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Workflow.Instruction where

import DA.Action (void)
import DA.Optional(whenSome)
import Model.Balance
import Workflow.Data
import Workflow.TransactionManifest


template Instruction
  with
    provider: Party
    groupId: Text
    messageId: Text
    step: SettlementStep
    -- whether locking and incoming handling is done for this or not
    encumbered: Bool
  where
    signatory provider
    let identifier = toIdentifier this

    choice Encumber: ContractId Instruction
      with
      controller provider
       do
          assertMsg "Encumber: Instruction already encumbered." $ not encumbered
          whenSome (getSender step.ibans) $ \iban ->
            void $ exerciseByKey @Balance (BalanceKey with ..) $ Lock with amountToLock = step.delivery.amount; ..
          whenSome (getReceiver step.ibans) $ \iban -> do
            (_, Balance{..}) <- fetchByKey @Balance (BalanceKey with ..)
            void $ create IncomingBalance with balance = (Balance with currency = step.delivery.label; amount = step.delivery.amount; ..); identifier
          create this with encumbered = True

    choice Settle: ()
      with
        evidence : ContractId SettlementFinalized
      controller provider
       do
          assertMsg "Settle: Instruction should be encumbered." encumbered
          verifySettlement groupId evidence
          {-
            1. has sender -> burn locked balance
            2. has receiver -> deposit incoming balance
          -}
          whenSome (getSender step.ibans) $ \senderIban ->
            void $ exerciseByKey
                      @LockedBalance
                      (PendingBalanceKey with balanceKey = (BalanceKey with iban = senderIban; ..); ..)
                      Burn

          whenSome (getReceiver step.ibans) (\receiverIban ->
            void $ exerciseByKey
                    @IncomingBalance
                    (PendingBalanceKey with balanceKey = (BalanceKey with iban = receiverIban; ..); ..)
                    Deposit)

    choice Cancel: ()
      with
        evidence : ContractId SettlementRejected
      controller provider
       do
        verifyRejection groupId evidence
        {-
         case 1. has sender -> cancel the instruction will refund the LockedBalance back into Balance
         case 2. has receiver -> cancel the instruction will cancel the incoming Balance
        -}
        whenSome (getSender step.ibans) $ \senderIban ->
          void $ exerciseByKey
                  @LockedBalance
                  (PendingBalanceKey with balanceKey = (BalanceKey with iban = senderIban; ..); ..)
                  Refund
        whenSome (getReceiver step.ibans) $ \receiverIban ->
          void $ exerciseByKey
                  @IncomingBalance
                  (PendingBalanceKey with balanceKey = (BalanceKey with iban = receiverIban; ..); ..)
                  CancelIncoming

verifySettlement : Text -> ContractId SettlementFinalized -> Update ()
verifySettlement groupId evidenceCid = do
  evidence <- fetch evidenceCid
  assertMsg "Provided evidence cannot prove that settlement has not been finialized." $ groupId == evidence.groupId


verifyRejection : Text -> ContractId SettlementRejected -> Update ()
verifyRejection groupId evidenceCid = do
  evidence <- fetch evidenceCid
  assertMsg "SProvided evidence cannot prove that settlement has not been rejected." $ groupId == evidence.groupId
