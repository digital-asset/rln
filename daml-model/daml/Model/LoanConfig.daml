--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Model.LoanConfig where

import Model.Balance

type Amount = Decimal
type IBAN = Text

-- Loan configuration on account (e.g. IBAN) level
template LoanConfig
    with
        provider: Party
        accountHolder: Party
        account: IBAN
        maxLoan: Amount
        activeLoan: Amount
        paybackThreshold: Amount
        paybackAccount: IBAN

    where
        signatory provider, accountHolder
        key (BalanceKey with iban = account, provider = provider) : BalanceKey
        maintainer key.provider

        ensure activeLoan <= maxLoan
        
        let remainingLoanAmount = maxLoan - activeLoan
            balanceKey = BalanceKey accountHolder account

        choice CreateLoan: (ContractId LoanConfig, ContractId Balance)
            with
                loanAmount: Amount
            controller provider
                do
                    assertMsg ("Maximum available loan is: " <> show remainingLoanAmount) $ remainingLoanAmount >= loanAmount
                    balance <- lookupByKey @Balance balanceKey
                    case balance of
                        Some balanceCid -> do
                            balanceNewCid <- exercise balanceCid Increase with increment = loanAmount
                            loanConfigCid <- create this with activeLoan = activeLoan + loanAmount
                            pure (loanConfigCid, balanceNewCid)
                        None -> error $ "No Balance found for BalanceKey: " <> show balanceKey                  
    