---
openapi: 3.0.1
info:
  title: RLN Participant
  description: API provided by the RLN Participant
  version: "2.0"
servers:
- url: https://virtserver.swaggerhub.com/SETL_API/RLN/2.0
  description: SwaggerHub API Auto Mocking
security:
- RLNBearer: []
paths:
  /api/addresses/{address}/balance:
    get:
      description: Get the balances for an address. This reports that 'hot', 'pessimistic' and 'actual' balances for all assets.
      operationId: getAddressBalance
      parameters:
      - name: address
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
    post:
      description: Change a balance. This affects the 'hot', 'pessimistic', and 'actual' balances
      operationId: changeBalance
      parameters:
      - name: address
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceChange'
        required: true
      responses:
        "200":
          description: Balance changed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
  /api/addresses/{address}/test:
    post:
      description: Test if balances can be retrieved for a proposed wallet address
      operationId: testWalletAddress
      parameters:
      - name: address
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletAddressTestDTO'
        required: true
      responses:
        "200":
          description: The address's balances were retrievable
          content:
            application/json:
              schema:
                type: object
        "400":
          description: The address's balances were NOT retrievable
          content:
            application/json:
              schema:
                type: object
        "412":
          description: The party associated with the address was not recognised
          content:
            application/json:
              schema:
                type: object
  /api/approval/list:
    get:
      description: Get approval list
      operationId: getRequiredApprovals
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
  /api/approval/properties:
    post:
      description: Update an approval
      operationId: updateApprovalProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalProperties'
      responses:
        "204":
          description: Updated
          content:
            application/json: {}
  /api/approval/status:
    post:
      description: Update the approval or rejection status of a specific transaction
      operationId: updateTransactionApprovalStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStatusUpdate'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: object
  /api/balance/{walletId}:
    get:
      description: Get all the balances for all addresses in a wallet
      operationId: getBalances
      parameters:
      - name: walletId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
  /api/create:
    post:
      description: Create a new group of transactions. Returns generated PACS.008 messages.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageGroup'
      responses:
        "200":
          description: Success
          content:
            application/xml: {}
  /api/getLocalBalance:
    get:
      description: Get the balance for an address, provided the address is local to this participant
      operationId: getLocalBalance
      parameters:
      - name: address
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
  /api/ledger/addresses:
    get:
      description: Get all the known ledger addresses
      operationId: get
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LedgerAddressDTO'
    post:
      description: Create a new ledger address
      operationId: post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAddressDTO'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: object
        "400":
          description: If address is not an IBAN, or the ledger address already exists.
          content:
            application/json:
              schema:
                type: string
                format: object
  /api/ledger/addresses/{address}:
    delete:
      description: Delete the specified ledger address. The address's balance must be zero.
      operationId: delete
      parameters:
      - name: address
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Success
          content:
            '*/*': {}
  /api/ledger/clients:
    get:
      description: Get all the clients
      operationId: get_1
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientDTO'
    post:
      description: Create a new client. Returns the internal ID assigned to the new client.
      operationId: post_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDTO'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json: {}
  /api/ledger/clients/{clientId}:
    delete:
      description: Delete a ledger client
      operationId: delete_1
      parameters:
      - name: clientId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Success
          content:
            application/json: {}
  /api/parties:
    get:
      description: Get all the known parties
      operationId: get_2
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartyDTO'
    post:
      description: Create a new party
      operationId: post_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartyDTO'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json: {}
  /api/parties/me:
    get:
      description: Get the 'id'', 'name', and 'bic' of this party
      operationId: getMyParty
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyDTO'
  /api/test/kafka/pause:
    post:
      tags:
      - TEST
      description: TEST ONLY - pause collection of messages from Kafka
      operationId: pause
      responses:
        default:
          description: default response
          content:
            text/plain:
              schema:
                type: string
  /api/test/kafka/resume:
    post:
      tags:
      - TEST
      description: TEST ONLY - resume collection of messages from Kafka
      operationId: resume
      responses:
        default:
          description: default response
          content:
            text/plain:
              schema:
                type: string
  /api/test/kafka/status:
    get:
      tags:
      - TEST
      description: TEST ONLY - Get the status of the Kafka listeners
      operationId: status
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
  /api/transactions:
    get:
      description: Get a page of transactions matching the criteria
      operationId: getTransactions
      parameters:
      - name: incompleteOnly
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: address
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
  /api/wallets:
    get:
      description: Get all the wallets
      operationId: getWallets
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDTO'
    post:
      description: Create a new wallet
      operationId: postWallets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletDTO'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json: {}
  /api/wallets/{walletId}/addresses:
    get:
      description: Get all the wallet addresses in the specified wallet
      operationId: get_3
      parameters:
      - name: walletId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletAddressDTO'
    post:
      description: Create a new wallet address
      operationId: post_3
      parameters:
      - name: walletId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletAddressDTO'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json: {}
  /api/wallets/{walletId}/addresses/{address}:
    delete:
      description: Delete an address from a wallet
      operationId: delete_2
      parameters:
      - name: walletId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: address
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Success
          content:
            application/json: {}
  /finalised:
    post:
      description: Inform the participant of a decision on a group of messages
      operationId: finalised
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Finalised'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /transferProposal:
    post:
      description: Inform the participant of a new proposal. Returns the results of any automatic decisions
      operationId: transferProposal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferProposal'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Approval'
components:
  schemas:
    AgentAccount:
      required:
      - account
      - agent
      type: object
      properties:
        account:
          maxLength: 70
          minLength: 0
          type: string
        address:
          type: boolean
        agent:
          pattern: '[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?|[A-Z0-9]{18}[0-9]{2}'
          type: string
    Approval:
      type: object
      properties:
        bankBic:
          type: string
        groupId:
          type: string
        messageId:
          type: string
        reason:
          type: string
        status:
          type: string
          enum:
          - APPROVE
          - REJECT
    ApprovalProperties:
      type: object
      properties:
        address:
          type: string
          description: The address
        approvalMode:
          type: string
          description: How auto-approval is decided
          enum:
          - AUTO
          - LIMIT
          - MANUAL
        limit:
          type: number
          description: The limit for limited approvals
      description: The properties associated with an auto-approver.
    Balance:
      type: object
      properties:
        address:
          type: string
        assetId:
          type: integer
          format: int64
        assetName:
          type: string
        assetOrLiability:
          type: string
          enum:
          - ASSET
          - LIABILITY
        balance:
          type: number
        client:
          type: string
        error:
          type: string
          enum:
          - UNAUTHORIZED
          - UNKNOWN_HOST
          - CONNECTION_REFUSED
          - UNKNOWN
        party:
          type: string
        type:
          type: string
    BalanceChange:
      required:
      - change
      type: object
      properties:
        assetId:
          type: integer
          description: The ID of of the asset. Either this or the asset name must be specified.
          format: int64
        assetName:
          type: string
          description: The name or code of the asset. Either this or the asset ID must be specified.
        change:
          type: number
          description: The amount by which to change the balance. Use positive values to increase the balance, and negative values to decrease it.
      description: A change to apply to an address's balance
    ClientDTO:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Finalised:
      type: object
      properties:
        groupId:
          type: string
        reason:
          type: string
        status:
          type: string
          enum:
          - APPROVE
          - REJECT
    LedgerAddressDTO:
      required:
      - address
      - approvalLimit
      - approvalMode
      - assetId
      - bearerToken
      type: object
      properties:
        address:
          type: string
        approvalLimit:
          type: number
          format: double
        approvalMode:
          type: string
        assetId:
          type: integer
          format: int64
        bearerToken:
          type: string
        clientId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        isIBAN:
          type: boolean
    MessageGroup:
      required:
      - from
      - groups
      type: object
      properties:
        from:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/TransactionGroup'
        id:
          type: string
    PartyDTO:
      required:
      - baseUrl
      - bic
      - name
      type: object
      properties:
        baseUrl:
          type: string
        bic:
          type: array
          items:
            type: string
        id:
          type: integer
          format: int64
        name:
          type: string
    Transaction:
      type: object
      properties:
        address:
          type: string
          description: The address of the creditor or debtor.
        assetCode:
          type: string
          description: The code associated with the asset.
        assetId:
          type: integer
          description: The internal numerical ID of the asset.
          format: int64
        balance:
          type: number
          description: The balance change from this transaction.
        createdAt:
          type: string
          format: date-time
        groupId:
          type: string
          description: The ID of the enclosing transaction group.
        id:
          type: string
          description: The internal ID of this transaction
        messageId:
          type: string
          description: The ID of the message that enclosed this transaction.
        partyCode:
          type: string
          description: The code for the acting party
        status:
          type: string
          description: The status of this transaction
        transactionId:
          type: string
          description: The ID of this transaction
      description: A Transactions requiring approval or rejection
    TransactionGroup:
      required:
      - transactions
      type: object
      properties:
        id:
          type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    TransactionStatusUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - WAITING
          - APPROVE
          - REJECT
    TransferProposal:
      type: object
      properties:
        groupId:
          type: string
        messageId:
          type: string
        payload:
          type: string
    WalletAddressDTO:
      required:
      - address
      - bearerToken
      - partyId
      type: object
      properties:
        address:
          type: string
        bearerToken:
          type: string
        partyId:
          type: integer
          format: int64
        walletId:
          type: integer
          format: int64
    WalletAddressTestDTO:
      required:
      - bearerToken
      - partyId
      type: object
      properties:
        bearerToken:
          type: string
        partyId:
          type: integer
          format: int64
    WalletDTO:
      type: object
      properties:
        data:
          type: string
        id:
          type: integer
          format: int64
  securitySchemes:
    RLNBearer:
      type: http
      scheme: bearer
      bearerFormat: jwt
