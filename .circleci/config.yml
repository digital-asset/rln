# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  install_sdk:
    description: "Install Daml SDK"
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Install Daml SDK
          command: |
            curl -sSL https://get.daml.com/ | sh /dev/stdin << parameters.version >>
            # idea from https://circleci.com/docs/2.0/env-vars/
            >> $BASH_ENV echo 'export PATH="$HOME/.daml/bin:$PATH"'

  package_quarkus_app:
    description: "Packaging a Quarkus Application"
    parameters:
      archive:
        type: string
      build_directory:
        type: string
    steps:
      - run:
          name: Creating Tarball
          command: |
            tar cvfj << parameters.archive >> -C << parameters.build_directory >> quarkus-app

  sign_artifacts:
    description: "Sign Artifacts with GnuPG"
    parameters:
      artifact_directory:
        type: string
    steps:
      - run:
          name: "Prepare GPG dir and key file"
          command: |
            export KEY_FILE=$(mktemp)
            export GPG_DIR=$(mktemp -d)
            echo "$gpg_code_signing" | base64 -d > $KEY_FILE
      - run:
          name: "Signing the artifacts"
          command: |
            gpg --homedir $GPG_DIR --no-tty --quiet --import $KEY_FILE
            for artifact in *; do
              echo "Signing: $artifact"
              gpg --homedir $GPG_DIR -ab "$artifact"
            done
      - run:
          name: "Cleanup GPG dir and key file"
          when: always
          command: |
            rm -rf $KEY_FILE $GPG_DIR

jobs:
  test_daml_java:
    parameters:
      daml_sdk_version:
        type: string
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - install_sdk:
          version: << parameters.daml_sdk_version >>
      - run:
          name: Daml Tests
          working_directory: daml-model
          command: |
            daml test --junit .daml/daml-tests.xml
      - store_test_results:
          path: daml-model/.daml/daml-tests.xml
      - run:
          name: Gradle Tests
          working_directory: .
          command: |
            ./gradlew test
      # See: https://circleci.com/docs/collect-test-data/#gradle-junit-test-results
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
  blackduck_check:
    parameters:
      daml_sdk_version:
        type: string
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - install_sdk:
          version: << parameters.daml_sdk_version >>
      - run:
          name: Gradle build
          working_directory: .
          command: |
            gradle build -x test
      - run:
          name: Blackduck detect
          command: |
            # TODO remove exclude pip
            bash <(curl -s https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect) \
            ci-build digitalasset_rln_us main \
            --logging.level.com.synopsys.integration=DEBUG \
            --detect.excluded.detector.types=pip \
            --detect.notices.report=false \
            --detect.timeout=3600
  make_release:
    parameters:
      daml_sdk_version:
        type: string
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - install_sdk:
          version: << parameters.daml_sdk_version >>
      # TODO: Rearrange jobs or workflows to utilize previous results. E.g. using workspaces and `requires`.
      - run:
          name: Gradle Build
          command: |
            ./gradlew clean build
      - run: mkdir artifacts
      - package_quarkus_app:
          archive: "artifacts/gui-backend.tar.bz2"
          build_directory: "gui-backend/build"
      - package_quarkus_app:
          archive: "artifacts/integration-adapter.tar.bz2"
          build_directory: "integration-adapter/build"
      - run:
          name: "Move DARs to artifacts"
          command: |
            mv daml-model/build/daml/rln*.dar artifacts
      - sign_artifacts:
          artifact_directory: artifacts
      - store_artifacts:
          path: artifacts

parameters:
  do_release:
    type: boolean
    default: false

workflows:
  checkout-build-test:
    jobs:
      - test_daml_java:
          daml_sdk_version: "2.5.0"
      - blackduck_check:
          daml_sdk_version: "2.5.0"
          context:
            - blackduck
  release:
#    when: << pipeline.parameters.do_release >>
    jobs:
      - make_release:
          daml_sdk_version: "2.5.0"
          context: npn-publish
