--
-- Copyright (c) 2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module Trigger.BalanceManagement where

import DA.Foldable
import DA.Optional (whenSome)
import Daml.Trigger
import Workflow.TransactionManifest
import Workflow.Instruction

balanceManagementTrigger : Trigger UnProcessedSettlements
balanceManagementTrigger = Trigger
  { initialize = pure []
  , updateState = addToUnProcessedTransactions
  , rule = updateBalance
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @SettlementFinalized,
      registeredTemplate @SettlementRejected,
      registeredTemplate @Instruction
    ]
  , heartbeat = None
  }

type GroupId = Text
data Settlement = Settlement with
    groupId : GroupId
    status  : SettlementStatus
data SettlementStatus =
    Finalized (ContractId SettlementFinalized)
  | Rejected (ContractId SettlementRejected)
type UnProcessedSettlements = [Settlement]

addToUnProcessedTransactions : Message -> TriggerUpdateA UnProcessedSettlements ()
addToUnProcessedTransactions (MTransaction Transaction{events}) =
    forA_ events markedAsProcessed
  where
    markedAsProcessed (CreatedEvent created) = do
      whenSome (fromCreated @SettlementFinalized created) $
        \(_, evidence, SettlementFinalized{groupId}) ->
          modify (Settlement groupId (Finalized evidence) ::)
      whenSome (fromCreated @SettlementRejected created) $
        \(_, evidence, SettlementRejected{groupId}) ->
          modify (Settlement groupId (Rejected evidence) ::)
    markedAsProcessed _else =
        pure ()
addToUnProcessedTransactions _any = pure ()

updateBalance: Party -> TriggerA UnProcessedSettlements ()
updateBalance provider = do
    instructions <- query @Instruction
    forA_ instructions encumberInstruction
    unprocessedTransactions <- get
    forA_ unprocessedTransactions settleInstructionsForTransaction
    put []
  where
    encumberInstruction : (ContractId Instruction, Instruction) -> TriggerA UnProcessedSettlements ()
    encumberInstruction (cid, Instruction{encumbered = False}) =
      dedupExerciseD "Encumber" cid Encumber
    encumberInstruction _ = pure ()
    getAllEncumberedInstructionCidsForGroupId: GroupId -> TriggerA UnProcessedSettlements [ContractId Instruction]
    getAllEncumberedInstructionCidsForGroupId targetGroupId =
      map fst <$> queryFilter @Instruction \i -> i.groupId == targetGroupId && i.encumbered
    settleInstructionsForTransaction: Settlement -> TriggerA UnProcessedSettlements ()
    settleInstructionsForTransaction transaction = do
      instructionsInGroup <- getAllEncumberedInstructionCidsForGroupId $ transaction.groupId
      let exerciseCall = case transaction.status of
            Finalized evidence -> (\cid -> dedupExerciseD "Settle" cid Settle with evidence)
            Rejected evidence -> (\cid -> dedupExerciseD "Cancel" cid Cancel with evidence)
      forA_ instructionsInGroup exerciseCall

dedupExerciseD msg = debug msg >> dedupExercise
